From 0dc5f903cdbc146059bcc3628df8c1bd09f3b14e Mon Sep 17 00:00:00 2001
From: Alvin Chang <alvinga@andestech.com>
Date: Tue, 5 Mar 2024 16:47:35 +0800
Subject: [PATCH 05/17] core: riscv: Mask/Unmask exceptions for
 thread_get_core_local()

Exceptions should be masked before calling thread_get_core_local().

Signed-off-by: Alvin Chang <alvinga@andestech.com>
---
 core/arch/riscv/kernel/abort.c       | 3 +++
 core/arch/riscv/kernel/thread_arch.c | 4 ++++
 2 files changed, 7 insertions(+)

diff --git a/core/arch/riscv/kernel/abort.c b/core/arch/riscv/kernel/abort.c
index 0b9c5391c..86f13fa8b 100644
--- a/core/arch/riscv/kernel/abort.c
+++ b/core/arch/riscv/kernel/abort.c
@@ -352,6 +352,7 @@ static enum fault_type get_fault_type(struct abort_info *ai)
 
 void abort_handler(uint32_t abort_type, struct thread_abort_regs *regs)
 {
+	uint32_t exceptions = thread_mask_exceptions(THREAD_EXCP_ALL);
 	struct abort_info ai;
 
 	set_abort_info(abort_type, regs, &ai);
@@ -391,4 +392,6 @@ void abort_handler(uint32_t abort_type, struct thread_abort_regs *regs)
 		handle_user_mode_panic(&ai);
 		break;
 	}
+
+	thread_unmask_exceptions(exceptions);
 }
diff --git a/core/arch/riscv/kernel/thread_arch.c b/core/arch/riscv/kernel/thread_arch.c
index 0cd22fdda..3d3c77f66 100644
--- a/core/arch/riscv/kernel/thread_arch.c
+++ b/core/arch/riscv/kernel/thread_arch.c
@@ -173,8 +173,10 @@ static void copy_trap_to_scall(struct thread_trap_regs *trap_regs,
 
 static void thread_user_ecall_handler(struct thread_trap_regs *trap_regs)
 {
+	uint32_t exceptions = thread_mask_exceptions(THREAD_EXCP_ALL);
 	struct thread_scall_regs scall_regs;
 	struct thread_core_local *l = thread_get_core_local();
+	thread_unmask_exceptions(exceptions);
 	int ct = l->curr_thread;
 
 	copy_trap_to_scall(trap_regs, &scall_regs);
@@ -492,10 +494,12 @@ static bool is_user_mode(struct thread_ctx_regs *regs)
 
 vaddr_t thread_get_saved_thread_sp(void)
 {
+	uint32_t exceptions = thread_mask_exceptions(THREAD_EXCP_ALL);
 	struct thread_core_local *l = thread_get_core_local();
 	int ct = l->curr_thread;
 
 	assert(ct != THREAD_ID_INVALID);
+	thread_unmask_exceptions(exceptions);
 	return threads[ct].kern_sp;
 }
 
-- 
2.34.1

