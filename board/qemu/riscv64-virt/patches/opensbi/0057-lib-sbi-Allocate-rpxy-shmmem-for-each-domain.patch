From 17d765af1c62eabbcb75553cd3d7d1078c7de89f Mon Sep 17 00:00:00 2001
From: Yong Li <yong.li@intel.com>
Date: Wed, 28 Feb 2024 13:52:48 +0800
Subject: [PATCH 57/63] lib: sbi: Allocate rpxy shmmem for each domain

Each domain need its own shared memory region.
The SBI implementation is responsible for
determining the accessible to each S-mode domain.

Signed-off-by: Yong Li <yong.li@intel.com>
---
 include/sbi/sbi_domain.h |  3 +++
 include/sbi/sbi_rpxy.h   | 12 +++++++++-
 lib/sbi/sbi_init.c       | 16 +++++++++-----
 lib/sbi/sbi_rpxy.c       | 48 +++++++++++++++++++++++++---------------
 4 files changed, 55 insertions(+), 24 deletions(-)

diff --git a/include/sbi/sbi_domain.h b/include/sbi/sbi_domain.h
index 4706cfc..3cf5889 100644
--- a/include/sbi/sbi_domain.h
+++ b/include/sbi/sbi_domain.h
@@ -13,6 +13,7 @@
 #include <sbi/sbi_types.h>
 #include <sbi/sbi_hartmask.h>
 #include <sbi/sbi_domain_context.h>
+#include <sbi/sbi_rpxy.h>
 
 struct sbi_scratch;
 
@@ -179,6 +180,8 @@ struct sbi_domain {
 	const struct sbi_hartmask *possible_harts;
 	/** Contexts for possible HARTs indexed by hartindex */
 	struct sbi_context *hartindex_to_context_table[SBI_HARTMASK_MAX_BITS];
+	/** rpxy state for possible HARTs indexed by hartindex */
+	struct rpxy_state *hartindex_to_rs_table[SBI_HARTMASK_MAX_BITS];
 	/** Array of memory regions terminated by a region with order zero */
 	struct sbi_domain_memregion *regions;
 	/** HART id of the HART booting this domain */
diff --git a/include/sbi/sbi_rpxy.h b/include/sbi/sbi_rpxy.h
index 5f1a238..a53c6c7 100644
--- a/include/sbi/sbi_rpxy.h
+++ b/include/sbi/sbi_rpxy.h
@@ -37,7 +37,11 @@ struct sbi_rpxy_service_group {
 	/** List head to a set of service groups */
 	struct sbi_dlist head;
 
-	/** Details identifying this service group */
+	/**
+	 * Details identifying this service group the transport_id
+	 * NOTE: The transport_id includes uppder 16bits protocol
+	 * * type, and lower 16bits id value.
+	 */
 	u32 transport_id;
 	u32 service_group_id;
 	unsigned long max_message_data_len;
@@ -63,6 +67,12 @@ struct sbi_rpxy_service_group {
 				       unsigned long *events_len);
 };
 
+/** A RPXY state structure */
+struct rpxy_state {
+	unsigned long shmem_size;
+	unsigned long shmem_addr;
+};
+
 /** Check if some RPMI proxy service group is available */
 bool sbi_rpxy_service_group_available(void);
 
diff --git a/lib/sbi/sbi_init.c b/lib/sbi/sbi_init.c
index 8c933a2..90a7414 100644
--- a/lib/sbi/sbi_init.c
+++ b/lib/sbi/sbi_init.c
@@ -358,11 +358,6 @@ static void __noreturn init_coldboot(struct sbi_scratch *scratch, u32 hartid)
 		sbi_hart_hang();
 	}
 
-	rc = sbi_rpxy_init(scratch);
-	if (rc) {
-		sbi_printf("%s: rpxy init failed (error %d)\n", __func__, rc);
-		sbi_hart_hang();
-	}
 
 	/*
 	 * Note: Finalize domains after HSM initialization so that we
@@ -377,6 +372,17 @@ static void __noreturn init_coldboot(struct sbi_scratch *scratch, u32 hartid)
 		sbi_hart_hang();
 	}
 
+	/*
+	 * Note: Each s-mode domain will need its own RPXY shared
+	 * memory region.
+	 * Note: Initialize the RPXY after domain finalize.
+	*/
+	rc = sbi_rpxy_init(scratch);
+	if (rc) {
+		sbi_printf("%s: rpxy init failed (error %d)\n", __func__, rc);
+		sbi_hart_hang();
+	}
+
 	/*
 	 * Note: Platform final initialization should be after finalizing
 	 * domains so that it sees correct domain assignment and PMP
diff --git a/lib/sbi/sbi_rpxy.c b/lib/sbi/sbi_rpxy.c
index c25e0a1..fd8c813 100644
--- a/lib/sbi/sbi_rpxy.c
+++ b/lib/sbi/sbi_rpxy.c
@@ -14,18 +14,23 @@
 #include <sbi/sbi_platform.h>
 #include <sbi/sbi_rpxy.h>
 #include <sbi/sbi_scratch.h>
-
-struct rpxy_state {
-	unsigned long shmem_size;
-	unsigned long shmem_addr;
-};
-
-/** Offset of pointer to RPXY state in scratch space */
-static unsigned long rpxy_state_offset;
+#include <sbi/sbi_console.h>
+#include <sbi/sbi_domain.h>
+#include <sbi/sbi_heap.h>
 
 /** List of RPMI proxy service groups */
 static SBI_LIST_HEAD(rpxy_group_list);
 
+/** Get the context pointer for a given hart index and domain */
+#define sbi_hartindex_to_domain_rs(__hartindex, __d) \
+	(__d)->hartindex_to_rs_table[__hartindex]
+
+/** Macro to obtain the current hart's context pointer */
+#define sbi_domain_rs_thishart_ptr()                  \
+	sbi_hartindex_to_domain_rs(                   \
+		sbi_hartid_to_hartindex(current_hartid()), \
+		sbi_domain_thishart_ptr())
+
 static struct sbi_rpxy_service *rpxy_find_service(
 					struct sbi_rpxy_service_group *grp,
 					u8 service_id)
@@ -78,9 +83,7 @@ int sbi_rpxy_set_shmem(unsigned long shmem_size,
 		       unsigned long shmem_phys_hi,
 		       unsigned long flags)
 {
-	struct rpxy_state *rs =
-		sbi_scratch_thishart_offset_ptr(rpxy_state_offset);
-
+	struct rpxy_state *rs = sbi_domain_rs_thishart_ptr();
 	if (shmem_phys_lo == -1UL && shmem_phys_hi == -1UL) {
 		rs->shmem_size = 0;
 		rs->shmem_addr = 0;
@@ -113,8 +116,7 @@ int sbi_rpxy_send_message(u32 transport_id,
 	void *tx = NULL, *rx = NULL;
 	struct sbi_rpxy_service *srv = NULL;
 	struct sbi_rpxy_service_group *grp;
-	struct rpxy_state *rs =
-		sbi_scratch_thishart_offset_ptr(rpxy_state_offset);
+	struct rpxy_state *rs = sbi_domain_rs_thishart_ptr();
 
 	if (!rs->shmem_size)
 		return SBI_ENO_SHMEM;
@@ -162,8 +164,7 @@ int sbi_rpxy_get_notification_events(u32 transport_id, u32 service_group_id,
 {
 	int rc;
 	struct sbi_rpxy_service_group *grp;
-	struct rpxy_state *rs =
-		sbi_scratch_thishart_offset_ptr(rpxy_state_offset);
+	struct rpxy_state *rs = sbi_domain_rs_thishart_ptr();
 
 	if (!rs->shmem_size)
 		return SBI_ENO_SHMEM;
@@ -220,9 +221,20 @@ int sbi_rpxy_register_service_group(struct sbi_rpxy_service_group *grp)
 
 int sbi_rpxy_init(struct sbi_scratch *scratch)
 {
-	rpxy_state_offset = sbi_scratch_alloc_type_offset(struct rpxy_state);
-	if (!rpxy_state_offset)
-		return SBI_ENOMEM;
+	u32 i, j;
+	struct sbi_domain *dom;
+	struct rpxy_state *rs;
+	/* Loop through each domain to configure its rpxy state */
+	sbi_domain_for_each(i, dom) {
+		/* Iterate over all possible HARTs and allocate rpxy state structure */
+		sbi_hartmask_for_each_hartindex(j, dom->possible_harts) {
+			rs = sbi_zalloc(sizeof(struct rpxy_state));
+			if (!rs)
+				return SBI_ENOMEM;
+
+			dom->hartindex_to_rs_table[j] = rs;
+		}
+	}
 
 	return sbi_platform_rpxy_init(sbi_platform_ptr(scratch));
 }
-- 
2.34.1

