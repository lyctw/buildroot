From 7e6cca5ce05fe3cf9a96ef18b91bb0000b4202f0 Mon Sep 17 00:00:00 2001
From: Yu Chien Peter Lin <peterlin@andestech.com>
Date: Fri, 26 Jan 2024 18:32:19 +0800
Subject: [PATCH 3/8] Add RISC-V OPTEE support

---
 drivers/tee/Kconfig       |  3 ++-
 drivers/tee/optee/Kconfig |  2 +-
 drivers/tee/optee/core.c  | 31 +++++++++++++++++++++++++++++--
 3 files changed, 32 insertions(+), 4 deletions(-)

diff --git a/drivers/tee/Kconfig b/drivers/tee/Kconfig
index 5ca5a0836c..39e172a501 100644
--- a/drivers/tee/Kconfig
+++ b/drivers/tee/Kconfig
@@ -1,8 +1,9 @@
 # Generic Trusted Execution Environment Configuration
 config TEE
 	bool "Trusted Execution Environment support"
-	depends on (ARM && (ARM64 || CPU_V7A)) || SANDBOX
+	depends on (ARM && (ARM64 || CPU_V7A)) || SANDBOX || RISCV
 	select ARM_SMCCC if ARM
+	select SBI if RISCV
 	help
 	  This implements a generic interface towards a Trusted Execution
 	  Environment (TEE). A TEE is a trusted OS running in some secure
diff --git a/drivers/tee/optee/Kconfig b/drivers/tee/optee/Kconfig
index db0bcfa6f1..f1b4929da1 100644
--- a/drivers/tee/optee/Kconfig
+++ b/drivers/tee/optee/Kconfig
@@ -1,7 +1,7 @@
 # OP-TEE Trusted Execution Environment Configuration
 config OPTEE
 	bool "OP-TEE"
-	depends on ARM_SMCCC
+	depends on ARM_SMCCC || SBI
 	help
 	  This implements the OP-TEE Trusted Execution Environment (TEE)
 	  driver. OP-TEE is a Trusted OS designed primarily to rely on the
diff --git a/drivers/tee/optee/core.c b/drivers/tee/optee/core.c
index 5fc0505c78..42e38a73cb 100644
--- a/drivers/tee/optee/core.c
+++ b/drivers/tee/optee/core.c
@@ -763,7 +763,7 @@ static void optee_smccc_smc(unsigned long a0, unsigned long a1,
 			    unsigned long a6, unsigned long a7,
 			    struct arm_smccc_res *res)
 {
-	arm_smccc_smc(a0, a1, a2, a3, a4, a5, a6, a7, res);
+	//arm_smccc_smc(a0, a1, a2, a3, a4, a5, a6, a7, res);
 }
 
 static void optee_smccc_hvc(unsigned long a0, unsigned long a1,
@@ -772,7 +772,32 @@ static void optee_smccc_hvc(unsigned long a0, unsigned long a1,
 			    unsigned long a6, unsigned long a7,
 			    struct arm_smccc_res *res)
 {
-	arm_smccc_hvc(a0, a1, a2, a3, a4, a5, a6, a7, res);
+	//arm_smccc_hvc(a0, a1, a2, a3, a4, a5, a6, a7, res);
+}
+
+static void optee_riscv_sbi(unsigned long a0, unsigned long a1,
+			    unsigned long a2, unsigned long a3,
+			    unsigned long a4, unsigned long a5,
+			    unsigned long a6, unsigned long a7,
+			    struct arm_smccc_res *res)
+{
+	/* SBI_EXT_TEE */
+	register uintptr_t __a0 asm ("a0") = a0;
+	register uintptr_t __a1 asm ("a1") = a1;
+	register uintptr_t __a2 asm ("a2") = a2;
+	register uintptr_t __a3 asm ("a3") = a3;
+	register uintptr_t __a4 asm ("a4") = a4;
+	register uintptr_t __a5 asm ("a5") = a5;
+	register uintptr_t __a6 asm ("a6") = a6;
+	register uintptr_t __a7 asm ("a7") = 0x544545;
+	asm volatile ("ecall"
+		      : "+r" (__a0), "+r" (__a1), "+r" (__a2), "+r" (__a3)
+		      : "r" (__a4), "r" (__a5), "r" (__a6), "r" (__a7)
+		      : "memory");
+	res->a0 = __a0;
+	res->a1 = __a1;
+	res->a2 = __a2;
+	res->a3 = __a3;
 }
 
 static optee_invoke_fn *get_invoke_func(struct udevice *dev)
@@ -790,6 +815,8 @@ static optee_invoke_fn *get_invoke_func(struct udevice *dev)
 		return optee_smccc_hvc;
 	else if (!strcmp("smc", method))
 		return optee_smccc_smc;
+	else if (!strcmp("riscv_sbi", method))
+		return optee_riscv_sbi;
 
 	debug("optee: invalid \"method\" property: %s\n", method);
 	return ERR_PTR(-EINVAL);
-- 
2.34.1

